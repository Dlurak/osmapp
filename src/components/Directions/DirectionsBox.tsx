import styled from '@emotion/styled';
import React, { useCallback, useState } from 'react';
import { Stack } from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import { t } from '../../services/intl';
import { ModeToggler } from './ModeToggler';
import Router from 'next/router';
import { handleRouting } from './routing/handleRouting';
import { Result, StyledPaper } from './Result';
import { buildUrl, CloseButton, getOnrejected } from './helpers';
import { Profile, RoutingResult } from './routing/types';
import { useBoolState, useMobileMode } from '../helpers';
import { LoadingButton } from '@mui/lab';
import { useSnackbar } from '../utils/SnackbarContext';
import { Option } from '../SearchBox/types';
import { getOptionToLonLat } from '../SearchBox/getOptionToLonLat';
import { StopList } from './StopList';
import { useReactToUrl } from './reactToUrl';

const Wrapper = styled(Stack)`
  position: absolute;
  top: 8px;
  left: 8px;
  z-index: 1001; // over the LayerSwitcherButton
  width: 340px;
`;

const useGetOnSubmit = (
  points: Option[],
  mode: Profile,
  setResult: (result: RoutingResult) => void,
  setLoading: (value: ((prevState: boolean) => boolean) | boolean) => void,
) => {
  const { showToast } = useSnackbar();

  return () => {
    const filteredPoints = points.filter(Boolean);
    const url = buildUrl(mode, filteredPoints);
    if (url === Router.asPath) {
      setLoading(true);
      handleRouting(mode, filteredPoints.map(getOptionToLonLat))
        .then(setResult)
        .catch(getOnrejected(showToast))
        .finally(() => setLoading(false));
    } else {
      Router.push(url);
    }
  };
};

type Props = {
  setResult: (result: RoutingResult) => void;
  hideForm: boolean;
};

// generated by https://v0.dev/chat/3MwraSQEqCc
export const DirectionsForm = ({ setResult, hideForm }: Props) => {
  const [loading, setLoading] = useState(false);
  const [mode, setMode] = useState<Profile>('car');
  const [points, setPoints] = useState<Option[]>([undefined, undefined]);

  useReactToUrl(setMode, setPoints, setResult);
  const onSubmit = useGetOnSubmit(points, mode, setResult, setLoading);

  if (hideForm) {
    return null;
  }

  return (
    <StyledPaper elevation={3}>
      <Stack direction="row" spacing={1} mb={2} alignItems="center">
        <ModeToggler value={mode} setMode={setMode} />
        <div style={{ flex: 1 }} />
        <div>
          <CloseButton />
        </div>
      </Stack>

      <StopList points={points} setPoints={setPoints} />

      <LoadingButton
        loading={loading}
        loadingPosition="start"
        variant="contained"
        fullWidth
        startIcon={<SearchIcon />}
        onClick={onSubmit}
      >
        {t('directions.get_directions')}
      </LoadingButton>
    </StyledPaper>
  );
};

export const DirectionsBox = () => {
  const isMobileMode = useMobileMode();
  const [result, setResult] = useState<RoutingResult>(null);
  const [revealed, revealForm, hide] = useBoolState(false); // mobile only
  const hideForm = isMobileMode && result && !revealed;

  const setResultAndHide = useCallback(
    (result: RoutingResult) => {
      setResult(result);
      hide();
    },
    [hide],
  );

  return (
    <Wrapper spacing={1}>
      <DirectionsForm setResult={setResultAndHide} hideForm={hideForm} />
      {result && (
        <Result result={result} revealForm={!revealed && revealForm} />
      )}
    </Wrapper>
  );
};
